<font color="red">This document is under development.</font> The content described here is being used internally by Mconf.

= Introduction =

Nagios is being used by Mconf to monitor the cloud infrastructure and provide performance data to the Mconf Load Balancer. This wiki page will explain the configurations used for the Nagios server and also the configurations used in each monitored client.

= Configuring a Nagios Monitoring Central =

Copy this script and paste it to `install-nagios.sh` in your home on Nagios server.

{{{
#!/bin/bash

# Installing Nagios on Ubuntu Server 10.04.3 64 bits
# http://nagios.sourceforge.net/docs/3_0/quickstart-ubuntu.html
# http://www.vivaolinux.com.br/artigo/Monitorando-redes-e-servidores-com-Nagios/

aptitude update
aptitude install -y apache2 libapache2-mod-php5 build-essential libgd2-xpm-dev subversion git-core xinetd

mkdir ~/downloads
cd ~/downloads
wget http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-3.3.1.tar.gz
wget http://prdownloads.sourceforge.net/sourceforge/nagios/nsca-2.7.2.tar.gz
wget http://prdownloads.sourceforge.net/sourceforge/nagiosplug/nagios-plugins-1.4.15.tar.gz
tar xzf nagios-3.3.1.tar.gz 
tar xzf nsca-2.7.2.tar.gz
tar xzf nagios-plugins-1.4.15.tar.gz 

/usr/sbin/useradd -m -s /bin/bash nagios
echo 'Enter the password for the new user nagios'
passwd nagios
/usr/sbin/groupadd nagcmd
/usr/sbin/usermod -a -G nagcmd nagios
/usr/sbin/usermod -a -G nagcmd www-data

cd ~/downloads/nagios
./configure --with-command-group=nagcmd
make all
make install
make install-init
make install-config
make install-commandmode

make install-webconf
echo 'Enter the password for the user nagiosadmin'
htpasswd -c /usr/local/nagios/etc/htpasswd.users nagiosadmin
service apache2 reload

cd ~/downloads/nagios-plugins-1.4.15
./configure --with-nagios-user=nagios --with-nagios-group=nagios
make
make install

cd ~/downloads/nsca-2.7.2
./configure
make
make install
cp src/nsca /usr/local/nagios/bin/
cp sample-config/nsca.cfg /usr/local/nagios/etc/
chmod a+r /usr/local/nagios/etc/nsca.cfg
# install as XINETD service
cp ~/downloads/nsca-2.7.2/sample-config/nsca.xinetd /etc/xinetd.d/nsca
sed -i "s:\tonly_from.*:#\0:g" /etc/xinetd.d/nsca
chmod a+r /etc/xinetd.d/nsca
service xinetd restart

# install PyNag
cd ~/downloads
svn checkout http://pynag.googlecode.com/svn/ pynag-read-only
cd pynag-read-only/trunk/
python setup.py install

# install Mconf stuff
sudo apt-get install python-argparse
cd ~
git clone git://github.com/mconf/nagios-etc.git
cp -r ~/nagios-etc/libexec/nagios-hosts/ /usr/local/nagios/libexec/
cp -r ~/nagios-etc/libexec/bigbluebutton/ /usr/local/nagios/libexec/
cp -r ~/nagios-etc/etc/objects/mconf/ /usr/local/nagios/etc/objects/
cp /usr/local/nagios/etc/nagios.cfg /usr/local/nagios/etc/nagios.cfg.backup
cp /usr/local/nagios/etc/nsca.cfg /usr/local/nagios/etc/nsca.cfg.backup
cp ~/nagios-etc/etc/nagios.cfg ~/nagios-etc/etc/nsca.cfg /usr/local/nagios/etc/
crontab ~/nagios-etc/crontab-server

# configuring the central server
sed -i "s:nagios@localhost:mconf.prav@gmail.com:g" /usr/local/nagios/etc/objects/contacts.cfg
sed -i "s:.*enable_notifications=.*:enable_notifications=1:g" /usr/local/nagios/etc/nagios.cfg
sed -i "s:.*execute_service_checks=.*:execute_service_checks=1:g" /usr/local/nagios/etc/nagios.cfg
sed -i "s:.*check_external_commands=.*:check_external_commands=1:g" /usr/local/nagios/etc/nagios.cfg
sed -i "s:.*accept_passive_service_checks=.*:accept_passive_service_checks=1:g" /usr/local/nagios/etc/nagios.cfg

ln -s /etc/init.d/nagios /etc/rcS.d/S99nagios
mkdir -p /usr/local/nagios/var/spool/checkresults
mkdir -p /usr/local/nagios/var/archives
chown -R nagios:nagios /usr/local/nagios

}}}

Then execute:

{{{
chmod +x ~/install-nagios.sh
sudo ~/install-nagios.sh
}}}

To check if there's no errors in the Nagios configuration files:

{{{
sudo /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg
}}}

To restart the Nagios service:

{{{
sudo service nagios start
}}}

== Enabling the json interface for Nagios ==

Copy the following content to ~/downloads/nagios/cgi/Makefile.patch:

{{{
42c42
< CGIS=avail.cgi cmd.cgi config.cgi extinfo.cgi history.cgi notifications.cgi outages.cgi showlog.cgi status.cgi status-json.cgi statuswml.cgi summary.cgi tac.cgi $(CGIEXTRAS)
---
> CGIS=avail.cgi cmd.cgi config.cgi extinfo.cgi history.cgi notifications.cgi outages.cgi showlog.cgi status.cgi statuswml.cgi summary.cgi tac.cgi $(CGIEXTRAS)
162,164d161
< status-json.cgi: status-json.c $(CGIDEPS) $(CDATADEPS)
< 	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ status-json.c $(CGILIBS) $(CDATALIBS) $(LIBS)
< 
}}}

Copy the following content to ~/downloads/nagios/cgi/status-json.c.patch:

{{{
736d735
< 	char *host_notes="";
755d753
< 	char *service_performance_data="";
978,981d975
< 				if(temp_host->notes!=NULL){
< 					process_macros(temp_host->notes,&processed_string,0);
< 					host_notes=processed_string;
< 			}
1004d997
< printf("\t\t\t\t \"host_notes\":\"%s\", \n", host_notes);
1081d1073
< 			service_performance_data=(temp_status->perf_data==NULL)?"":html_encode(temp_status->perf_data,TRUE);
1099,1101c1091
< printf("\t\t\t \"service_plugin_output\":\"%s\", \n", service_plugin_output);
< printf("\t\t\t \"service_performance_data\":\"%s\" \n", service_performance_data);
< 
---
> printf("\t\t\t \"service_plugin_output\":\"%s\" \n", service_plugin_output);
}}}

Then run:

{{{
cd ~/downloads/nagios/cgi
# http://exchange.nagios.org/directory/Addons/APIs/JSON/status-2Djson/details
wget -O status-json.c "http://exchange.nagios.org/components/com_mtree/attachment.php?link_id=2498&cf_id=24"

patch -R Makefile < Makefile.patch
patch -R status-json.c < status-json.c.patch
make all install
}}}

To access the json data, use the URL:

{{{
http://<NAGIOS_IP>/nagios/cgi-bin/status-json.cgi
}}}

<wiki:comment>
= Installing n2rrd =

{{{
#!/bin/bash

# http://n2rrd-wiki.diglinks.com/display/n2rrd/RRDTOOL
aptitude install rrdtool librrds-perl

# http://n2rrd-wiki.diglinks.com/display/n2rrd/Install+from+Source
cd ~/downloads
svn co http://n2rrd.diglinks.com/repos/n2rrd/tags/1.4.5 n2rrd-1.4.5
cd n2rrd-1.4.5

sed -i "s:NAGIOS_CONF_DIR=.*:NAGIOS_CONF_DIR=/usr/local/nagios/etc:g" install.sh
mkdir -p /srv/www
./install.sh

cp /etc/n2rrd/dist-n2rrd.conf /etc/n2rrd/n2rrd.conf
cd /etc/n2rrd/templates
for fdist in `find -not -iwholename '*.svn-base' -name 'dist-*'`; do fnew=`echo $fdist | sed 's:dist-::'`; mv $fdist $fnew; done

sed -i "s:process_performance_data=.*:process_performance_data=1:g" /usr/local/nagios/etc/nagios.cfg
sed -i "s:host_perfdata_command=.*:host_perfdata_command=rrd-process-host-perfdata:g" /usr/local/nagios/etc/nagios.cfg
sed -i "s:service_perfdata_command=.*:service_perfdata_command=rrd-process-service-perfdata:g" /usr/local/nagios/etc/nagios.cfg

}}}

Configure CPAN (Comprehensive Perl Archive Network):
{{{
cpan
}}}

When it prompts, enter a CPAN mirror (such as `http://linorg.usp.br/CPAN/`). CPAN is necessary to install RRD:Simple, a dependency of *n2rrd*.
</wiki:comment>

== Installing Nagiosgraph ==

{{{
aptitude update
aptitude install -y rrdtool librrds-perl
cd ~/downloads
wget http://sourceforge.net/projects/nagiosgraph/files/nagiosgraph/1.4.4/nagiosgraph-1.4.4.tar.gz
tar xzf nagiosgraph-1.4.4.tar.gz
cd nagiosgraph-1.4.4
}}}

Copy the following content into etc/ngshared.pm.patch ([http://sourceforge.net/projects/nagiosgraph/forums/forum/394747/topic/5039306 link]):

{{{
805c805
<             chomp $key;
---
>             chop $key;
}}}

And run the command:

{{{

patch -R etc/ngshared.pm < etc/ngshared.pm.patch

}}}

Then install Nagiosgraph:

{{{
./install.pl --layout debian

echo 'include /etc/nagiosgraph/nagiosgraph-apache.conf' >> /etc/apache2/httpd.conf
}}}

This is the default configuration for Nagiosgraph:

{{{
configuration:
  ng_layout            debian
  ng_prefix            /
  ng_etc_dir           /etc/nagiosgraph
  ng_bin_dir           /usr/lib/nagiosgraph
  ng_cgi_dir           /usr/lib/cgi-bin/nagiosgraph
  ng_doc_dir           /usr/share/nagiosgraph/doc
  ng_examples_dir      /usr/share/nagiosgraph/examples
  ng_www_dir           /usr/share/nagiosgraph/htdocs
  ng_util_dir          /usr/share/nagiosgraph/util
  ng_var_dir           /var/spool/nagiosgraph
  ng_rrd_dir           /var/spool/nagiosgraph/rrd
  ng_log_dir           /var/log/nagiosgraph
  ng_log_file          /var/log/nagiosgraph/nagiosgraph.log
  ng_cgilog_file       /var/log/nagiosgraph/nagiosgraph-cgi.log
  ng_url               /nagiosgraph
  ng_cgi_url           /nagiosgraph/cgi-bin
  ng_css_url           /nagiosgraph/nagiosgraph.css
  ng_js_url            /nagiosgraph/nagiosgraph.js
  nagios_cgi_url       /nagios3/cgi-url
  nagios_perfdata_file /tmp/perfdata.log
  nagios_user          nagios
  www_user             www-data
  modify_nagios_config n
  nagios_config_file   /etc/nagios3/nagios.cfg
  nagios_commands_file /etc/nagios3/commands.cfg
  modify_apache_config n
  apache_config_dir    /etc/apache2/conf.d
  apache_config_file   
}}}

Batch processing:

{{{
sed -i "s:.*process_performance_data=.*:process_performance_data=1:g" /usr/local/nagios/etc/nagios.cfg

sed -i "s:.*service_perfdata_file=.*:service_perfdata_file=/tmp/perfdata.log:g" /usr/local/nagios/etc/nagios.cfg
sed -i "s:.*service_perfdata_file_template=.*:service_perfdata_file_template=\$LASTSERVICECHECK\$||\$HOSTNAME\$||\$SERVICEDESC\$||\$SERVICEOUTPUT\$||\$SERVICEPERFDATA\$:g" /usr/local/nagios/etc/nagios.cfg
sed -i "s:.*service_perfdata_file_mode=.*:service_perfdata_file_mode=a:g" /usr/local/nagios/etc/nagios.cfg
sed -i "s:.*service_perfdata_file_processing_interval=.*:service_perfdata_file_processing_interval=30:g" /usr/local/nagios/etc/nagios.cfg
sed -i "s:.*service_perfdata_file_processing_command=.*:service_perfdata_file_processing_command=ng-process-perfdata-batch:g" /usr/local/nagios/etc/nagios.cfg

sed -i "s:.*host_perfdata_file=.*:host_perfdata_file=/tmp/perfdata.log:g" /usr/local/nagios/etc/nagios.cfg
sed -i "s:.*host_perfdata_file_template=.*:host_perfdata_file_template=\$LASTHOSTCHECK\$||\$HOSTNAME\$||PING||\$HOSTOUTPUT\$||\$HOSTPERFDATA\$:g" /usr/local/nagios/etc/nagios.cfg
sed -i "s:.*host_perfdata_file_mode=.*:host_perfdata_file_mode=a:g" /usr/local/nagios/etc/nagios.cfg
sed -i "s:.*host_perfdata_file_processing_interval=.*:host_perfdata_file_processing_interval=30:g" /usr/local/nagios/etc/nagios.cfg
sed -i "s:.*host_perfdata_file_processing_command=.*:host_perfdata_file_processing_command=ng-process-perfdata-batch:g" /usr/local/nagios/etc/nagios.cfg

sed -i "s:^service_perfdata_command=.*:#\0:g" /usr/local/nagios/etc/nagios.cfg
sed -i "s:^host_perfdata_command=.*:#\0:g" /usr/local/nagios/etc/nagios.cfg
}}}

Immediate processing:

{{{
sed -i "s:.*process_performance_data=.*:process_performance_data=1:g" /usr/local/nagios/etc/nagios.cfg
sed -i "s:.*service_perfdata_command=.*:service_perfdata_command=ng-process-service-perfdata-immediate:g" /usr/local/nagios/etc/nagios.cfg
sed -i "s:.*host_perfdata_command=.*:host_perfdata_command=ng-process-host-perfdata-immediate:g" /usr/local/nagios/etc/nagios.cfg

sed -i "s:^service_perfdata_file.*:#\0:g" /usr/local/nagios/etc/nagios.cfg
sed -i "s:^host_perfdata_file.*:#\0:g" /usr/local/nagios/etc/nagios.cfg
}}}

Follow [http://nagiosgraph.svn.sourceforge.net/viewvc/nagiosgraph/trunk/nagiosgraph/README.html#graphs_in_nagios_frames this instructions] to enable the !NagiosGraph on the standard Nagios web application. Also, to enable the Mouse Over effect on the web application, to visualize graphs for services/hosts, follow [http://nagiosgraph.svn.sourceforge.net/viewvc/nagiosgraph/trunk/nagiosgraph/README.html#graphs_in_nagios_mouseovers this instructions].

Copy the following content to ~/downloads/nagiosgraph.conf.patch:

{{{
286,287d285
< heartbeats = .*,BigBlueButton Info,.*=300
< 
294,296d291
< # For BigBlueButton Info, the step interval is 1 second
< stepsizes = .*,BigBlueButton Info,.*=1
< 
318,325c313
< 
< # For BigBlueButton Info, it will record:
< # day -> 1 record per second
< # week -> 1 record each 30 minutes
< # month -> 1 record each 4 hours
< # year -> 1 record each day
< resolutions = .*,BigBlueButton Info,.*=86400 336 182 365
< 
---
> #
331,333c319
< 
< steps = .*,BigBlueButton Info,.*=1 1800 14400 86400
< 
---
> #
350c336
< maximums = Current Load,.*;Current Users,.*;Total Processes,.*;PLW,.*;BigBlueButton Info,.*
---
> maximums = Current Load,.*;Current Users,.*;Total Processes,.*;PLW,.*
}}}

Then patch the nagiosgraph configuration file:

{{{
patch -R /etc/nagiosgraph/nagiosgraph.conf < ~/downloads/nagiosgraph.conf.patch
}}}

<wiki:comment>
Run this command to aggregate the "BigBlueButton Info" service values on RRD using the maximum value instead of the average:

{{{
if [ `cat /etc/nagiosgraph/nagiosgraph.conf | grep '^maximums.*BigBlueButton Info.*' | wc -l` -eq 0 ]
then
	sed -i 's:^maximums.*:\0;BigBlueButton Info,\.*:g' /etc/nagiosgraph/nagiosgraph.conf
fi
}}}
</wiki:comment>

<wiki:comment>
= Installing nagios-api =

{{{
aptitude install python-setuptools python-dev libssl-dev

cd ~/downloads
wget http://pypi.python.org/packages/source/J/Jinja2/Jinja2-2.6.tar.gz#md5=1c49a8825c993bfdcf55bb36897d28a2
tar xzf Jinja2-2.6.tar.gz
cd Jinja2-2.6/
python setup.py install

cd ~/downloads
wget http://pypi.python.org/packages/source/W/Werkzeug/Werkzeug-0.8.3.tar.gz#md5=12aa03e302ce49da98703938f257347a
tar xzf Werkzeug-0.8.3.tar.gz
cd Werkzeug-0.8.3/
python setup.py install

cd ~/downloads
git clone https://github.com/jamwt/diesel.git
cd diesel/
python setup.py install

cd ~
git clone https://github.com/xb95/nagios-api.git
}}}

Copy this diff into a text file (patch.txt):

{{{
diff --git nagios/core.py nagios/core.py
index 3f12ff5..eaa6450 100644
--- nagios/core.py
+++ nagios/core.py
@@ -125,7 +125,7 @@ class HostOrService(NagiosObject):
         self.essential_keys = ['current_state', 'plugin_output',
             'notifications_enabled', 'last_check', 'last_notification',
             'active_checks_enabled', 'problem_has_been_acknowledged',
-            'last_hard_state', 'scheduled_downtime_depth']
+            'last_hard_state', 'scheduled_downtime_depth', 'performance_data']
 
     def attach_downtime(self, dt):
         '''Given a Downtime object, store a record to it for lookup later.'''
}}}

Then apply this patch with the command:

{{{
cd nagios-api/
patch -p1 < ../patch.txt
}}}

To run the server-side api:

{{{
cd ~/nagios-api
./nagios-api -p 8080 -s /usr/local/nagios/var/status.dat
}}}

To access the json data, use the URL:

{{{
http://<NAGIOS_IP>:8080/state
}}}
</wiki:comment>

= Configuring the client to send passive checks =

Copy the following script to `monitor.sh`:

{{{
#!/bin/bash

NAGIOS_ADDRESS=
#INSTANCE_TYPE=bigbluebutton
#INSTANCE_TYPE=freeswitch

sudo aptitude update
sudo aptitude -y install git-core python-dev python-argparse subversion

# we are using the svn trunk instead of the lastest stable tag because of this:
# http://code.google.com/p/psutil/issues/detail?id=248
svn checkout http://psutil.googlecode.com/svn/trunk psutil-read-only
cd psutil-read-only/
python setup.py build
sudo python setup.py install
cd ..
rm -rf psutil-read-only/

wget http://prdownloads.sourceforge.net/sourceforge/nagios/nsca-2.7.2.tar.gz
tar xzf nsca-2.7.2.tar.gz
cd nsca-2.7.2
./configure
make
make install
sudo mkdir -p /usr/local/nagios/bin/ /usr/local/nagios/etc/
USER=`whoami`
sudo chown $USER:$USER -R /usr/local/nagios
cp src/send_nsca /usr/local/nagios/bin/
cp sample-config/send_nsca.cfg /usr/local/nagios/etc/
cd ..
rm -rf nsca-2.7.2.tar.gz nsca-2.7.2

git clone git://github.com/mconf/nagios-etc.git
nagios-etc/cli/serverup $NAGIOS_ADDRESS $INSTANCE_TYPE
crontab -l 2>/dev/null > crontab.dump
cat nagios-etc/crontab-client >> crontab.dump
crontab crontab.dump
rm crontab.dump
sudo shutdown -r now
}}}

Set the variables `NAGIOS_SERVER` and `INSTANCE_TYPE`, then execute:

{{{
chmod +x monitor.sh
./monitor.sh
}}}