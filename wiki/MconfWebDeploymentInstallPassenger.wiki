#summary How to install Passenger

_This page is part of the Mconf-Web deployment described in [MconfWebDeploymentManual this page]._

== Installing Passenger for Mconf-Web ==

<wiki:toc max_depth="3" />




=== Passenger with Apache ===

To use Apache with Passenger, you first need to install Apache and some other dependencies required by Passenger:

{{{
sudo apt-get install apache2-mpm-prefork apache2-prefork-dev libapr1-dev \
                     libaprutil1-dev libcurl4-openssl-dev libssl-dev zlib1g-dev
}}}

You can also see the list of packages [https://github.com/mconf/mconf-web/blob/latest/config/packages.ubuntu in this file] in our repository

Next, install Passenger (it's a ruby gem) and it's module for Apache. Passenger has a nice installer that will compile the Apache module and install it for you. If some dependency is missing it will warn you and help you install it. Run the following commands:

{{{
gem install passenger -v 3.0.11            # this version is also defined in the Gemfile
rvmsudo passenger-install-apache2-module
}}}

The application `passenger-install-apache2-module` is interactive and has the following steps:

  # Check for dependencies: If your system is missing any required software, it will warn you and tell you how to install them;
  # Automatically compile and install the module for Apache;
  # It will show you some lines that must be added the you Apache configuration file. Ignore this for now, the next step of this guide will show you how to configure it.
  # In the last step it will give you an example of how to deploy an application. Ignore the example for now, the next step of this guide will show you the specific configurations for Mconf-web.

See more about Passenger at [http://www.modrails.com/ their website] and [http://www.modrails.com/videos/passenger.mov check this video] to see how it can be installed along with Apache.


=== Apache configurations ===

By default Apache is installed at `/etc/apache2/` and it's configuration file will be at `/etc/apache2/apache2.conf`.
You can add configuration files at `/etc/apache2/conf.d/` and sites at `/etc/apache2/sites-available/`.

At first, enable the Passenger module in Apache:

{{{
rvmsudo passenger-install-apache2-module --snippet | sudo tee /etc/apache2/conf.d/mconf-passenger
}}}

(In case `passenger-install-apache2-module` is not found, look for it at `/usr/local/rvm/gems/ruby-1.9.2-p290@mconf/bin/` and use its full path in the command above.)

This will create a new configuration file with the Passenger module snippet, the same block Passenger showed you in the item 3. in the previous section. If you already added these lines to you config file, ignore this step.

Next, we enable the rewrite module in Apache and remove any default site existent:

{{{
sudo a2enmod rewrite
sudo rm /etc/apache2/sites-enabled/*
}}}

Now you need to add a configuration file for Mconf-Web. You might just download our example and edit it:

{{{
sudo curl https://raw.github.com/mconf/mconf-web/latest/config/apache2.conf.example -o /etc/apache2/sites-available/mconf-web
}}}

The file will be saved at `/etc/apache2/sites-available/mconf-web`. This is the content of this file:

{{{
<VirtualHost *:80>

  # Shows the maintenance page if it exists
  ErrorDocument 503 /system/maintenance.html
  RewriteEngine On
  RewriteCond %{REQUEST_URI} !\.(css|gif|jpg|png)$
  RewriteCond %{DOCUMENT_ROOT}/system/maintenance.html -f
  RewriteCond %{SCRIPT_FILENAME} !maintenance.html
  RewriteRule ^.*$  -  [redirect=503,last]

  ServerName www.yourhost.com
  DocumentRoot /somewhere/public
  <Directory /somewhere/public>
    AllowOverride all
    Options -MultiViews
  </Directory>
</VirtualHost>
}}}

You should change "`www.yourhost.com`" to your IP or domain and "`/somewhere/public`" (both occurrences) to the path to your Mconf-Web application, that should be something like "`/home/mconf/mconf-web/current/public`" (don't forget to point to the *public* directory!).

After editing the file, enable it in apache with:

{{{
sudo a2ensite mconf-web
}}}

At last, restart Apache and it should be ready to serve Mconf-Web:

{{{
sudo /etc/init.d/apache2 restart
}}}

Open your browser and try to access your localhost. You might see a page with the error "404 Not Found", but that is ok in case the application not deployed yet. 









=== Passenger with Nginx ===

_*Note:* If you're installing Mconf-Web in the same machine where you already have !BigBlueButton, you should use Apache for Mconf-Web. If you decide to use Nginx, you'll have to configure it manually (see more about this issue [MconfWebDeployInBBBMachine in this page])._

To use Nginx with Passenger, first install Passenger (it's a ruby gem) and then it will help you download, compile and install Nginx. Run the following commands:

{{{
gem install passenger -v 3.0.11          # this version is also defined in the Gemfile
rvmsudo passenger-install-nginx-module
}}}

The application `passenger-install-nginx-module` is a installer that guides you through the installation of Nginx for Passenger. It is interactive and has the following steps:

  # Check for dependencies: If your system is missing any required software, it will warn you and tell you how to install them;
  # Automatically download and install Nginx: Select the option *"1. Yes"*;
  # Where do you want to install Nginx to: You can choose the default location (just press enter). Nginx will be compiled and installed;
  # It will edit Nginx configuration file for you and give you an example of how to deploy an application. Ignore the example for now, the next step of this guide will show you the specific configurations for Mconf-web.

See more about Passenger at [http://www.modrails.com/ their website] and [http://www.modrails.com/videos/passenger_nginx.mov check this video] to see how it can be installed along with Nginx.


=== Nginx configurations ===

If you installed Nginx in the default location, it's configuration file will be at `/opt/nginx/conf/nginx.conf`.

Open this file and add the following content inside the `http` block, above the other `server` block. 

{{{
server {
    listen 80;
    server_name IP_OR_DOMAIN;
    root /home/mconf/mconf-web/current/public;
    passenger_enabled on;
    if (-f $document_root/system/maintenance.html) {
        rewrite ^(.*)$ /system/maintenance.html break;
    }
}
}}}

  <font color="red">*Important:*</font> Don't forget to change *`IP_OR_DOMAIN`* by the IP or domain name of your server.

You can find an example of the nginx.conf we use at our repository [https://github.com/mconf/mconf-web/blob/latest/config/nginx.conf.example here].

Since Passenger installs Nginx from source code, you won't have the script to start/stop Nginx. So we copied the script generated when you install the Nginx package in Ubuntu and made it available [https://github.com/mconf/mconf-web/blob/latest/config/nginx.init.example here]. Download it to your server with:

{{{
sudo curl https://raw.github.com/mconf/mconf-web/latest/config/nginx.init.example -o /etc/init.d/nginx
}}}

Now you can start/stop/restart Nginx with:

{{{
sudo /etc/init.d/nginx start
sudo /etc/init.d/nginx stop
sudo /etc/init.d/nginx restart
}}}

Open your browser and try to access your localhost. You might see a page with the error "404 Not Found", but that is ok in case the application not deployed yet. 









== Updating Passenger ==

Stop Apache/Nginx and uninstall the old Passenger gem:

{{{
sudo /etc/init.d/apache2 stop # or /etc/init.d/nginx
gem uninstall passenger
}}}

Install the new version of Passenger as described previously and install the Apache/Nginx module again:

{{{
rvmsudo passenger-install-apache2-module # or passenger-install-nginx-module
}}}

Check Passenger's version with:

{{{
gem list
}}}

Check the configuration files (for Apache you'll have to update the snippet) and restart the web server.