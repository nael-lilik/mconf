<wiki:toc max_depth="3" />

= Capistrano =

[https://github.com/capistrano/capistrano Capistrano] is a ruby gem that helps you deploy applications. You run commands from your development environment and they affect your production server. It is great if you're a developer and/or if you have multiple servers to update.

This guide will show you how to setup a production server using Capistrano to deploy the application.


== Setting up a production server ==

All the necessary steps to setup a production server are documented in our deployment page. This page will focus on the use of Capistrano and we will point to the deployment page whenever possible.

The steps necessary are:

  # Install system packages:
    * Using a script: [http://code.google.com/p/mconf/wiki/MconfWebDeploymentWithScript#1._System_Packages link]
    * Manually: [http://code.google.com/p/mconf/wiki/MconfWebDeploymentManual#1._System_Packages link]
  # Install ruby;
    * Using a script: [http://code.google.com/p/mconf/wiki/MconfWebDeploymentWithScript#2._Ruby link]
    * Manually: [http://code.google.com/p/mconf/wiki/MconfWebDeploymentManual#2._Ruby link]
  # Use Capistrano to deploy the application;
    * See below how to do it.
  # Install a web server and some other system-wide applications.
    * You shouldn't use the script here.
    * Manually: [http://code.google.com/p/mconf/wiki/MconfWebDeploymentManual#5._Install_a_web_server,_configure_the_application_and_deploy link]


As you can see above, steps 1, 2, and 4 are documented in the deployment guides and you have the links above. We recommend that you use the script for steps 1 and 2 and perform step 4 manually.

Step 2 is where you'll use Capistrano.


=== Step 2: Capistrano ===

  * Install shh server. openssh-server
  * To enable Capistrano to access you server and avoid the need to enter a password every time you run a command (which is quite annoying), you can setup the ssh keys in your server to allow your user to connect.

  * configure your local conf.yml
  * gem install bundler -v 1.0.18
  * cap staging setup:all
    * it might take some time, it is downloading the application
  *s






=== Capistrano ===

Capistrano is a ruby gem that helps you deploy applications. You run commands from your development environment and they affect your production server.

You should start by editing the file <tt>config/deploy/conf.yml</tt>. This file contains the configurations for the "two stages" we use for deployment:

  * "staging": this is a stage to test your application before deploying it to the real production server;
  * "production": the real production server.

All the examples below are for the "staging" stage. You can use the same commands for "production", just replace "staging" for "production".

==== Set up ssh keys ====

You can find plenty of resources about it in the web, but here's a quick guide.

First generate your personal key if you don't have it yet:

{{{
mkdir ~/.ssh
chmod 700 ~/.ssh
ssh-keygen -t rsa # you will be prompted for a password
}}}

Then you have to add your public key to the list of authorized keys in your server (note: don't forget to change "deploy@myserver.com"):

{{{
cat ~/.ssh/id_rsa.pub | ssh deploy@myserver.com "mkdir -p .ssh/ && cat >> .ssh/authorized_keys2"
}}}

More information at:

  * https://help.ubuntu.com/community/SSH/OpenSSH/Keys
  * http://help.github.com/deploy-keys/
  * http://snippets.dzone.com/posts/show/5730

==== First deploment ====

Our deploy has a task called `setup:all` that can be used to setup a server for the first time. Run:

{{{
cap staging setup:all
}}}

This task will do the following:
  * Create the basic directories in the server;
  * Checkout Mconf-web from github (using the branch you specified in <tt>conf.yml</tt>) and make it available to be served by Nginx;
  * Setup the database (with the basic data needed).

  <font color="red">*Important:*</font> The configuration files used in your development environment will be uploaded to the production server. So make sure you configured them. If you change any of them and need to upload to the production server, run:
  {{{
cap staging deploy:update
  }}}











== Management tasks and further information ==


==== Updating the server ====

After a while, you'll want to update the code of your server. Since you already have everything setup, it's pretty simple. Just run:

{{{
cap staging deploy:migrations  # update to a new release, run the migrations (i.e. updates the DB) and restart the web server
}}}

==== Further information ====

Capistrano has some other tasks you may need. You can see them all running:

{{{
cap -T
}}}

Below there's a list with tasks defined by Mconf-Web that you will possibly use:

{{{
cap staging deploy:udpate       # update to a new release
cap staging deploy:migrate      # run migrations
cap staging deploy:restart      # restart the web server
cap staging deploy:web:disable  # start maintenance mode (the site will be offline)
cap staging deploy:web:enable   # stop maintenance mode (the site will be online)
cap staging deploy:rollback     # go back to the previous version
cap staging setup:secret        # creates a new secret token (requires restart)
cap staging setup:db            # drops, creates and populates the db with the basic data
}}}

The files used by Capistrano that you may want to edit are:

  * <tt>config/deploy.rb</tt>
  * <tt>config/deploy/conf.yml</tt>
  * <tt>config/deploy/production.rb</tt>
  * <tt>config/deploy/staging.rb</tt>

Links:

  * Capistrano documentation: https://github.com/capistrano/capistrano/wiki
  * Multiple stages in Capistrano: https://github.com/capistrano/capistrano/wiki/2.x-Multistage-Extension