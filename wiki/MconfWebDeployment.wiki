= Deployment =

Mconf-web is a Rails application, so the deployment process is very similar to the deployment of any other Rails application.

The server setup we have right now, and thus the recommended setup, uses the following:

  # [http://www.ubuntu.com/ Ubuntu] 10.04 operating system
  # Ruby is installed with [https://rvm.beginrescueend.com/ RVM]
  # [http://www.modrails.com/ Phusion Passenger] (ruby app server)
  # [http://nginx.net/ Nginx] (web server)
  # [http://www.mysql.com/ MySQL] database
  # [https://github.com/capistrano/capistrano Capistrano] helps you run commands on the server from your development environment

The following guide will instruct you on how to setup *exactly* this environment.

  <font color="red">*Important:*</font> The following guide assumes that you have already a development environment configured. After you set up a basic server, the rest of the deployment will be done remotely from the development environment (using Capistrano). So take a look at [MconfWeb our wiki home] to set up your development environment.

Mconf-web should work in any operating system that has Ruby available (and most of them do have Ruby). Changing any of these items will certainly require modifications in the configuration files and scripts (and maybe even some code changes in some cases).

== 1. System setup ==

=== Ubuntu ===

First, setup a standard [http://www.ubuntu.com/ Ubuntu] installation and create a user `mconf` with a password:

{{{
sudo useradd mconf
sudo passwd mconf
}}}

To proceed with the setup of Mconf-web you will need to install some tools that will help you in the process (*ssh server*, *git*, and *curl*) and *ruby*.

=== Basic Tools ===

In Ubuntu, you can install them with:

{{{
sudo apt-get install openssh-server git curl
}}}

=== Ruby and RVM ===

Mconf-web uses Ruby *1.9.2*. To install Ruby, we suggest the use of RVM. There are scripts in Mconf-web that assume you have RVM installed, so you should use it unless you can't do it for some reason.

You can install RVM following our [RVMQuickSteps quick steps] or following [https://rvm.beginrescueend.com/rvm/install/ RVM's install page].

If you decided to use RVM, don't forget to actually install Ruby (and not only RVM) and create a gemset for Mconf-web:

{{{
rvm install 1.9.2
rvm gemset create mconf
rvm use --default 1.9.2@mconf
}}}


=== System Packages ===

As for the development environment, you will need to install system packages to run Mconf-web in production. The packages are listed in the ruby script at [https://github.com/mconf/mconf-web/blob/master/script/setup script/setup]. To download the script and use it, run:

{{{
curl https://github.com/mconf/mconf-web/raw/master/script/setup -o - | ruby - production
}}}

You will be prompted to type a password for MySQL in case you don't have it installed yet.

=== Nginx + Passenger ===

Nginx and Phusion Passenger are used to server the application. To install them, first install Passenger (it's a gem) and then it will help you download, compile and install Nginx. Actually, it will do it all for you. Run the following commands:

{{{
gem install passenger
rvmsudo passenger-install-nginx-module
}}}

The application `passenger-install-nginx-module` is a installer that guides you through the installation of Nginx for Passenger. It is interactive and has the following steps:

  # Check for required software: If your system is missing any required software, it will warn you and tell you how to install them;
  # Automatically download and install Nginx: Select the option *"1. Yes"*;
  # Where do you want to install Nginx to: You can choose the default location (just press enter). Nginx will be compiled and installed;
  # It will edit Nginx configuration file for you and give you an example of how to deploy an application. Ignore the example for now, the next step of this guide will show you the specific configurations for Mconf-web.

See more about Passenger at [http://www.modrails.com/ their website] and [http://www.modrails.com/videos/passenger_nginx.mov check this video] to see how it can be installed along with Nginx.

==== Nginx Configuration ====

If you installed Nginx in the default location, it's configuration file will be at `/opt/nginx/conf/nginx.conf`.

Open this file and add the following content inside the `http` block, above the other `server` block. 

{{{
server {
    listen 80;
    server_name IP_OR_DOMAIN;
    root /home/mconf/mconf-web/current/public;
    passenger_enabled on;
    if (-f $document_root/system/maintenance.html) {
        rewrite ^(.*)$ /system/maintenance.html break;
    }
}
}}}

  <font color="red">*Important:*</font> Don't forget to change *`IP_OR_DOMAIN`* by the IP or domain name of your server.

You can find an example of the nginx.conf we use at our repository [https://github.com/mconf/mconf-web/blob/master/config/nginx.conf.example here].

Since Passenger installs Nginx from source code, you won't have the script to start/stop Nginx. So we copied the script generated when you install the Nginx package in Ubuntu and made it available [https://github.com/mconf/mconf-web/blob/master/config/nginx.init.example here]. Download it to your server with:

{{{
sudo curl https://github.com/mconf/mconf-web/raw/master/config/nginx.init.example -o /etc/init.d/nginx
}}}

Now you can start/stop/restart Nginx with:

{{{
sudo /etc/init.d/nginx start
sudo /etc/init.d/nginx stop
sudo /etc/init.d/nginx restart
}}}

Start your web server now, open your browser and try to access it. You should see a page with the error "404 Not Found". That is ok, Nginx can't find the application because it was not deployed yet.

== 2. Deploy ==

After the previous steps, your server is configured and you can start to deploy the application. The following steps are all executed from your _development_ environment using Capistrano.

=== Capistrano ===

Capistrano is a ruby gem that helps you deploy applications. You run commands from your development environment and they affect your production server.

You should start by editing the file <tt>config/deploy/conf.yml</tt>. This file contains the configurations for the "two stages" we use for deployment:

  * "staging": this is a stage to test your application before deploying it to the real production server;
  * "production": the real production server.

All the examples below are for the "staging" stage. You can use the same commands for "production", just replace "staging" for "production".

==== Set up ssh keys ====

To enable capistrano to access your server you have to generate a public key for your local user (if you don't have one yet) and allow access to it in your server. You can find plenty of resources about it in the web, but shortly, you could do the following:

{{{
# generate the key
mkdir ~/.ssh && chmod 700 ~/.ssh
ssh-keygen -t rsa
  -> (you will be prompted for a password)

# set it in your server (NOTE: don't forget to change "deploy@myserver.com")
cat ~/.ssh/id_rsa.pub | ssh deploy@myserver.com "cat >> .ssh/authorized_keys2"
}}}

More information at:

  * https://help.ubuntu.com/community/SSH/OpenSSH/Keys
  * http://help.github.com/deploy-keys/
  * http://snippets.dzone.com/posts/show/5730

==== First deploment ====

Our deploy has a task called `setup:all` that can be used to setup a server for the first time. Run:

{{{
cap staging setup:all
}}}

This task will do the following:
  * Create the basic directories in the server;
  * Checkout Mconf-web from github (using the branch you specified in <tt>conf.yml</tt>) and make it available to be served by Nginx;
  * Setup the database (with the basic data needed).

  <font color="red">*Important:*</font> The configuration files used in your development environment will be uploaded to the production server. So make sure you configured them. If you change any of them and need to upload to the production server, run:
  {{{
cap staging deploy:update
  }}}

==== Updating the server ====

After a while, you'll want to update the code of your server. Since you already have everything setup, it's pretty simple. Just run:

{{{
cap staging deploy:migrations  # update to a new release, run the migrations (i.e. updates the DB) and restart the web server
}}}

==== Further information ====

Capistrano has some other tasks you may need. You can see them all running:

{{{
cap -T
}}}

Below there's a list with tasks defined by Mconf-Web that you will possibly use:

{{{
cap staging deploy:udpate       # update to a new release
cap staging deploy:migrate      # run migrations
cap staging deploy:restart      # restart the web server
cap staging deploy:web:disable  # start maintenance mode (the site will be offline)
cap staging deploy:web:enable   # stop maintenance mode (the site will be online)
cap staging deploy:rollback     # go back to the previous version
cap staging setup:secret        # creates a new secret token (requires restart)
cap staging setup:db            # drops, creates and populates the db with the basic data
}}}

The files used by Capistrano that you may want to edit are:

  * <tt>config/deploy.rb</tt>
  * <tt>config/deploy/conf.yml</tt>
  * <tt>config/deploy/production.rb</tt>
  * <tt>config/deploy/staging.rb</tt>

Links:

  * Capistrano documentation: https://github.com/capistrano/capistrano/wiki
  * Multiple stages in Capistrano: https://github.com/capistrano/capistrano/wiki/2.x-Multistage-Extension