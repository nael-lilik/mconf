= Mconf-Web =

|| [https://github.com/mconf/mconf-web Source code] || [MconfWeb#How_to_Start How to Start] ||

Mconf-Web is the social network in the Mconf webconferencing system.

It is (currently) a fork of *VCC*, and open source system that can be found at https://github.com/ging/vcc

Mconf-web is a web application that connects to a BigBlueButton server instance and allows the users to create and participate in webconferences. It provides functionalities that are (by design) not implemented in the core of BigBlueButton, such as:

 * User authentication;
 * Permission control to access webconference rooms;
 * Follows a social network model (inherited from VCC) with spaces (communities) that have events:
   * People from a space can interact using this space's webconferece room;
   * (_not implemented yet_) Events will have a webconference room associated. Users can schedule events and enable features such as automatic recording.
 * Users can also create their own webconferences and share with other members or invite non-members;

During the first phase of Mconf-web, we are strongly focusing on the integration with BigBlueButton. This means that we want to have the basic libraries needed to integrate a Ruby on Rails application and BigBlueButton fully functional and with all the features we need. The current Mconf-web is a test application for these libraries and is also an integration between BigBlueButton and an improved version of VCC. In the future, it's possible that Mconf-web will change it's model and move away from VCC.


== Differences between Mconf-web and VCC ==

The project supporting VCC has ended in the end of 2010, so it's development has been greatly reduced since then. You can see the new directions VCC's team has taken at their github page: https://github.com/ging

VCC is developed in Ruby on Rails 2.3.4 and uses Isabel to perform webconfereces. The most important differences included by Mconf-web are the use of *Rails 3* and the use of *BigBlueButton* as a replacement for Isabel.

== Integration with BigBlueButton ==

The integration with BigBlueButton is based on two gems (that are also being developed in the Mconf project):

  * *bigbluebutton-api-ruby* ([https://github.com/mconf/bigbluebutton-api-ruby]): A library to access the BigBlueButton API in Ruby applications. Developed on top of a gem called [http://code.google.com/p/bigbluebuttongem/ bigbluebuttongem] to be used in Mconf-Web.

  * *bigbluebutton_rails* ([https://github.com/mconf/bigbluebutton_rails]): An integration of BBB and Rails. It uses bigbluebutton-api-ruby to access the BBB API.

== How to Start ==

Setting up the development environment:

  # Install ruby. We recommend the use of rvm (http://rvm.beginrescueend.com/). See the quick steps below.
  # Run <tt>script/setup development</tt>. It will install some system packages that mconf-web uses (such as imagemagick, openssl, libxml2) and create configuration files.
  # Install bundler with <tt>gem install bundler</tt> and run <tt>bundle install</tt> to install all gems
  # Configuration files:
    * The script "<tt>setup</tt>" creates some configuration files that you need to run the application. You just need to open and configure them.
      * Database: <tt>config/database.yml</tt>
        * You may need to insert a password if you're using mysql.
      * Mailer: <tt>config/mail_conf.yml</tt>
        * Mconf-web uses by default a gmail account to send emails (<tt>see config/initializers/mail_conf.rb</tt>). You just need to insert you name/password in this file.
      * BigBlueButton server: <tt>config/bbb_conf.yml</tt>
        * This file holds the configuration of your BigBlueButton server. This server will be added in the database as the default server. Currently, all BigBlueButton rooms created through Mconf-web will use this server.
  # Run <tt>rake setup:development</tt>. It will drop and recreate your development database, create basic data (<b>you need</b> this data to run the application) and populate the db with test data.
  # Run <tt>rake setup:test</tt>. It will prepare the test enviroment (also creating the basic data needed).

Then you can:

  * Run the server with <tt>rails server</tt> and navigate to <tt>localhost:3000</tt>
  * Run tests with <tt>bundle exec rake spec</tt>

=== Quick steps to install Ruby using rvm ===

You can use the lastest versions of RVM and rubygems. For your information, we're currently using RVM 1.6.1 and rubygems 1.7.2.

  * Run:
    * <tt>bash < <( curl http://rvm.beginrescueend.com/releases/rvm-install-head )</tt>
  * Add the following line to your ~/.bashrc or ~/.bash_profile:
    * <tt>[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" # This loads RVM into a shell session.</tt>
  * Start a new prompt or load source in the current shell with:
    * <tt>source ~/.rvm/scripts/rvm</tt>
  * To check if it worked, run <tt>type rvm | head -1</tt> and it should output <tt>rvm is a function</tt>
  * Run <tt>rvm notes</tt> and install the packages under "For Ruby (MRI & ree)"
  * If needed, you can specify the version with: <tt>rvm rubygems 1.7.2</tt> (for version 1.7.2)
    * To check your rubygems version run <tt>gem -v</tt>
  * We recommend that you create a gemset for Mconf.
    * Creating the: <tt>rvm gemset create mconf</tt>
    * Use this gemset as default: <tt>rvm use --default 1.9.2@mconf</tt>