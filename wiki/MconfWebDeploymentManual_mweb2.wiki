#summary Step-by-step guide on how to deploy Mconf-Web

*<font color=red>This is a draft, don't use it</font>*

= Mconf-Web Deployment Guide (step-by-step guide) =

<wiki:toc max_depth="3" />

== Overview ==

This is a step-by-step guide showing how to install Mconf-Web. If you have experience deploying a Rails application this guide should look very familiar to you. 

<font color=red>Before starting, you *should* read the comments in the [MconfWebDeployment deployment page clicking here].</font>


== Installing Mconf-Web ==


=== 1. System packages ===

You need to install some system packages before you can run Mconf-web in production. See below the list of recommended packages:

<font color=red>TODO: review this list</font>

{{{
sudo apt-get install wget curl logrotate build-essential g++ libreadline-dev \
zlib1g-dev mysql-server mysql-client libmysqlclient-dev libxml2-dev \
libxslt1-dev libmagickcore-dev libmagickwand-dev libcurl4-openssl-dev ibopenssl-ruby1.9.1

# wget curl logrotate                          | recommended utility packages
# build-essential g++                          | for therubyracer and possibly others
# mysql-server mysql-client libmysqlclient-dev | for MySQL
# libxml2-dev libxslt1-dev                     | for nokogiri
# libmagickcore-dev libmagickwand-dev          | for rmagick
# libcurl4-openssl-dev libopenssl-ruby1.9.1    | for openssl
}}}


=== 2. Ruby ===

To install Ruby, we suggest the use of RVM (that's how we install ruby in development and production). But you have other options:

  * Using RVM (recommended): See [http://beginrescueend.com/rvm/install/ this page]. RVM can be installed as single-user or multi-user. For a production environment you should use the *multi-user* installation.
  * Using apt packages
  * From source: You can also download and install ruby manually, similarly to what's done in the script used by !BigBlueButton but skipping the packaging. Make sure you use the version described in [MconfWebDeployment this page]. 

After installing RVM, <font color=red>*restart your terminal!*</font> If you don't do that, RVM won't be found.

==== RVM ====

If you decided to use RVM, at first you need to install some packages:

{{{
rvm requirements
# and install the packages in the section: "For Ruby / Ruby HEAD"
}}}

Then you need to install Ruby, some packages and create a gemset for Mconf-web. Also, add your user to the "rvm" group.

{{{
rvmsudo rvm pkg install openssl
rvmsudo rvm --skip-autoreconf pkg install iconv
rvmsudo rvm pkg uninstall readline
rvmsudo rvm install RUBY_VERSION --with-openssl-dir=/usr/local/rvm/usr
rvm use RUBY_VERSION
rvmsudo rvm gemset create mconf
rvmsudo rvm alias create default RUBY_VERSION@mconf
sudo adduser mconf rvm
}}}


=== 3. Download the application ===

Install git if you don't have it and clone Mconf-Web at the directory you'd like to deploy it.

{{{
sudo apt-get install git
sudo mkdir -p /var/www/mconf-web/current
sudo git clone git://github.com/mconf/mconf-web.git /var/www/mconf-web/current
sudo chown -R mconf:www-data /var/www/mconf-web
}}}

Next, change your repository to the version you want to deploy. If you don't do this, you'll be deploying the master branch, and it is *not recommended*.

{{{
cd /var/www/mconf-web/current
git checkout latest     # branch that points to the latest version
}}}

The versions available are the tags available. For a list of all versions see: https://github.com/mconf/mconf-web/tags. We recommend the use of the branch "latest", as it will always point to the latest version available.

With the repository you can now install the dependencies:

{{{
bundle install --without=development test
}}}


=== 4. Configuration files ===

There are a few files that need to be configured. At first, copy the example files:

{{{
cp ~/mconf-web/config/setup_conf.yml.example ~/mconf-web/config/setup_conf.yml
cp ~/mconf-web/config/database.yml.example ~/mconf-web/config/database.yml
cp ~/mconf-web/config/analytics_conf.yml.example ~/mconf-web/config/analytics_conf.yml
}}}

Then edit the files you just created. If you need help configuring them, see [MconfWebSetupConf this page].

`setup_conf.yml` has general configurations for the application and it's optional: if you don't edit it now you can edit its properties from Mconf-Web's interface (see [MconfWebConfiguring this page]).

`analytics_conf.yml` has configurations for Google Analytics and is also optional. You can change it at any time and restart the application.

`database.yml` configures the database and you *have* to configure it now. By default, MySQL will be used. page].

  * [MconfWebDeploymentMySQL Click here to see how to configure MySQL]


=== 5. Application configurations ===

This step consists of everything that was not possible to be done before. because we needed the configuration files properly edited.

We'll setup the database and generate a new [http://www.railsrocket.com/rake-secret secret key] for rails:

{{{
cd /var/www/mconf-web/current
bundle exec rake setup:db RAILS_ENV=production
bundle exec rake secret RAILS_ENV=production
}}}

After that, you should restart your application. See the maintenance tasks below to know how.


=== 6. Web server ===

You can use both Apache or Nginx to serve Mconf-Web. We recommend the use of Apache (specially if you're installing Mconf-Web in the same machine that has !BigBlueButton).

Mconf-Web uses Passenger to server the application together with Apache or Nginx. So you'll have to install Passenger and use it in the configurations of the web server. See the guide below for a how to:

  * [MconfWebDeploymentInstallPassenger Guide to install Passenger]


=== 7. System-wide configurations ===

This contains the extra configurations you need to do on your server to run Mconf-Web. 

The first thing is to install and configure God, a process monitoring tool:

  * [MconfWebDeploymentInstallGod Guide to install God]

Also, we use a gem called Whenever to setup the crontab with tasks for Mconf-Web:

  * [MconfWebDeploymentGuideWhenever Guide to use Whenever]




== Maintenance tasks ==


=== Restart ===

To restart the application you need to restart the web server and god:

{{{
sudo /etc/init.d/apache2 restart  # if you're using apache
sudo /etc/init.d/god terminate    # to stop all child processes
sudo /etc/init.d/god start
}}}

The web server you have to restart every time you change anything in the application (source code) or in the configuration files.

You don't always need to restart god, only if you changed anything in its configuration files or in files that the monitored processes use (for example, if you change the Gmail account settings used to send emails). If you're not sure, restart it. Also, we use the action `terminate` so that god will also stop all monitored processes before stopping itself. It will, for instance, stop `delayed_job`  (a gem used to send emails) and then, when god is restarted, delayed_job will also be restarted (and so your new configurations will be applied).


=== Backup ===

The most important backup you need is your database. In MySQL, you can use the following commands to backup (and restore) the database used by Mconf-Web:

{{{
# backup
mysqldump -u mconf -p mconf_production > mconf_production-`date +%F`.sql

# restore
mysql -u mconf -p mconf_production < mconf_production-2011-06-21.sql
}}}

There are also files that are not stored in the database, such as user images and attachments. And you also might want to backup your log files.

So make sure you backup the files in the following folders:

{{{
/var/www/mconf-web/current/attachments/
/var/www/mconf-web/current/public/logos/
/var/www/mconf-web/current/log/
}}}

If you're not sure of what should be updated, you can backup the entire application folder:

{{{
tar -jcvf mconf-web-backup.tar.bz2 /var/www/mconf-web/current/
}}}


=== Update ===

Before starting, check the [MconfWebRoadMap changelog page] to see if there's anything else you'll need to do to upgrade your application besides what's written in this guide. Also make sure you create a *backup* of everything before updating.

If you're already deploying the branch `latest`, you just need to pull the changes from git:

{{{
cd /var/www/mconf-web/current
git pull origin latest
}}}

Update the dependencies:

{{{
bundle install --without=development test
}}}

Migrate the database:

{{{
bundle exec rake db:migrate RAILS_ENV=production
}}}

Update the crontab:

{{{
bundle exec whenever --update-crontab RAILS_ENV=production
}}}

Restart the web server as described in the previous section.