<font color="red">This is currently a draft.</font>

= Scaling Mconf =

This document contains a documentation of the infrastructure used for scaling Mconf. It is also a documentation of how the Mconf Network (see more about it at http://mconf.org/m/about/network) works today.

== Methodology ==

The scaling of Mconf has been divided in two phases with two distinct objectives:

  * *Objective 1*: increase the limit of simultaneous users in a web conference infrastructure.
  In other words: use several web conference servers in a single infrastructure to increase the limit of users imposed when using a single server. The difference between this infrastructure and a single web conference server shouldn't be noticeable neither for the users nor for the applications that use the system (e.g. !BigBlueButton's integration for Moodle). The infrastructure should be as dynamic as possible (e.g. servers can be added and removed) and as automatic as possible (e.g. new servers can register themselves in the "cloud" of servers).
  * *Objective 2*: increase the limit of users in a single web conference.
  This will imply in increasing the limit of users that a single Mconf-Live server supports and/or enable a single meeting to be held using more that one server.


The objective 1 has been started with start of the second phase of Mconf (Oct. 2011), and the objective 2 should start when the first one is completed.


== Architecture ==

The image below shows an overview of the current infrastructure. This architecture solves the problem of our objective 1: use several web conference servers in a single infrastructure.

https://lh4.googleusercontent.com/-vVqH4ZORaGI/UJz8WfrulCI/AAAAAAAAAvY/rJCwvjdDcDg/s1055/Mconf%2520Network%2520-%2520Current%2520Architecture%2520%2528full%2529.png

=== 1. Front-end ===

The front-end is no different than the current front-ends. Users (with web and mobile devices) will join the conferences through any application that's integrated with Mconf-Live. Examples are the Mconf web portal at http://mconf.org and any of the applications listed at http://www.bigbluebutton.org/open-source-integrations/.

Instead of communicating directly with a !BigBlueButton server, these front-end applications will use the Mconf Load Balancer, that implements the [http://code.google.com/p/bigbluebutton/wiki/API BigBlueButton API]. This means that the front-end applications *will not have to be modified* to use the Mconf infrastructure.

However, the Load Balancer's API currently has some very small differences from !BigBlueButton's API and more could be added in the future, but it is extremely important that, even with these small differences, the existent front-end applications should not need to be adapted to use the Mconf infrastructure. Moreover, nothing should be removed from the API. You can see the documentation of the API [MconfLBAPI in this page].


=== 2. Web conference back-end ===

This is where the most of our work is directed to currently. The back-end consists of a "cloud" of web conference servers, and two new components: the Mconf Monitoring Server (Nagios) and the Mconf Load Balancer. These components are being developed in Mconf and are explained below.

==== Mconf Monitoring Server (Nagios) ====

The Mconf Monitoring Server uses [http://www.nagios.org/ Nagios], an open source monitoring system that's very flexible and has a large number of users. This server monitors the cloud of web conference servers and provides access to all the monitoring data to users (i.e. using a graphical administration interface) or to applications (i.e. through an HTTP call that returns a JSON).

===== Checks/reports =====

Nagios provides plugins for several things that should be checked ("checks" or "reports") in a server: HTTP, PING, FTP, etc. These checks can be passive or active: passive checks are sent from a !BigBlueButton server to the Monitoring Server, while active checks are sent from the Monitoring Server to a !BigBlueButton server. For Mconf the following checks were implemented:

  * Memory Report: Informs the available and the total RAM in a web conference server;
  * Processor Report: Informs the CPU in use;
  * Network Report: Informs the network use, for input and output;
  * !BigBlueButton Report: Informs the number of users, meetings, users with audio and users with video in a web conference server.

There is also another plugin that was implemented to enable a !BigBlueButton server to automatically register itself in the infrastructure.

The intervals in which the Monitoring Server receives these information is configurable. We're currently using 10 seconds for memory, processor and network reports, and 30 seconds for !BigBlueButton reports. Also, the first three reports are passive: there's a very simple application installed in the !BigBlueButton servers that periodically sends information to the configured Monitoring Server. The !BigBlueButton report is active: the Monitoring Server periodically consults each !BigBlueButton server to get the data.

The interactions between the !BigBlueButton servers and the Monitoring Server are shown in the item *(2.a)* in the architecture image.

===== Database and graphics =====

The Monitoring Server was integrated with a [http://oss.oetiker.ch/rrdtool/ RRDtool database], that stores all the information received from the monitored servers and also display these information graphically with charts such as the example in the image below.

<font color="red">IMAGE...</font>

===== Source Code =====

==== Mconf Load Balancer ====

...

===== Algorithms =====

===== Dashboard =====

===== Multiple clients (salts) =====

===== Mobile API =====
...


=== 3. *Voice conference back-end* ===

...


===== TODO =====

  * Bot
  * lb: nagios dependent
  * voice: optional