= The script `mconf-web-conf` =

<wiki:toc max_depth="3" />

== Overview ==

`mconf-web-conf` is a utility script to help you install, configure and run some maintenance tasks on Mconf-Web. The script was created to help in the setup of a *production environment*. This page will detail how the script works. If you want a brief guide showing how to use it to install Mconf-Web, check [MconfWebDeploymentWithScript this page].

The script has several tasks that will be described below and that can also be seen with the command: `mconf-web-conf --help`. The latest version of this file can be found in [https://github.com/mconf/mconf-web/tree/master/script the Mconf-Web repository].

The script is written for bash and works only on Ubuntu systems (it will detect your system abort if you're not on Ubuntu). But it shouldn't be hard to adapt it to other unix distros. Patches are very welcome! You can also get our help using our mailing list (check it in the [http://code.google.com/p/mconf/ home page]).

== Installing ==

You can download it and use from your local folder with:

{{{
curl https://raw.github.com/mconf/mconf-web/master/script/mconf-web-conf -o mconf-web-conf
chmod a+x mconf-web-conf
}}}

Or install it in your system so that all users can access it:

{{{
sudo curl https://raw.github.com/mconf/mconf-web/master/script/mconf-web-conf -o /usr/local/bin/mconf-web-conf
sudo chmod a+x /usr/local/bin/mconf-web-conf
}}}


== Commands ==

=== `--install-packages` ===

{{{
mconf-web-conf --install-packages
}}}

Installs the system packages required to run Mconf-Web. The script currently supports only Ubuntu, and the list of packages to be installed is download from [https://github.com/mconf/mconf-web/blob/master/config/packages.ubuntu this file] at our repository. This file contains separate package lists for the production and development environments. The script installs packages only for a production environment.

Steps:
  * Download the `packages.<platform>` file with the list of packages (currently only for Ubuntu);
  * Installs the packages using apt-get.

=== `--install-ruby` ===

{{{
mconf-web-conf --install-ruby
}}}

This tasks install ruby using RVM.

RVM will be installed for all users in the system. See the "Multi-User Installation" at the [https://rvm.beginrescueend.com/rvm/install/ RVM website].

<font color=red>*Important note:*</font> After installing ruby, you should close your terminal and open it again, so that RVM will be fully operational.

Steps:

  * Installs RVM (if not installed);
  * Adds the current user to the group "rvm" so that he can use RVM.
  * Installs the system packages required by RVM (obtained using `rvm notes`);
  * Installs ruby 1.9.2 and creates a gemset for Mconf.


=== `--deploy-setup` ===

{{{
mconf-web-conf --deploy-setup
}}}

Configures the production environment. After this, Mconf-Web will be almost ready to be deployed to this machine, you just need to edit the configuration files and setup the database (with `--deploy-configure`).

Requires:

  * Ruby installed with RVM.

Steps:

  * Installs some basic gems;
  * Installs the web server:
    * The user will be prompted to choose between Apache or Nginx.
  * Downloads the latest version of Mconf-Web (the latest tag in our git repository);
  * Installs the rest of the dependencies (the gems specified in the Gemfile and git submodules).


=== `--deploy-configure` ===

{{{
mconf-web-conf --deploy-configure
}}}

This command should be used after editing the configuration files (see [MconfWebDeploymentWithScript this page]) to configure the application's database.

<font color=red>*Important note:*</font> Be aware that this command will erase your database, so this should not be used if you already have application data in your database.

Requires:

  * Ruby installed with RVM;
  * The application downloaded and configured (`--deploy-setup`).

Steps:

  * Configures the database (run the command `rake setup:db`);
  * Creates a new secret key ([http://www.railsrocket.com/rake-secret what is this?]).

=== `--update` ===

{{{
mconf-web-conf --deploy-update
}}}

Similar to `--deploy-first-time`, but just updates the application instead of deploying from scratch.

Same as `cap production deploy:migrations`. See more at [MconfWebDeploymentManual#Capistrano this page].

Requires:

  * Mconf-Web source code (`--checkout`);
  * A development environment properly configured (`--setup-dev` and `--config`).
  * A production environment with the application deployed (`--setup-prod` and `--deploy-first-time`).

=== `--restart` ===

{{{
mconf-web-conf --deploy-restart
}}}

Similar to `--deploy-udpate`. Restarts the web server. Useful if you changed something in the configuration files and need to reload it.

Same as `cap production deploy:restart`. See more at [MconfWebDeploymentManual#Capistrano this page].

Requires:

  * Mconf-Web source code (`--checkout`);
  * A development environment properly configured (`--setup-dev` and `--config`).
  * A production environment with the application deployed (`--setup-prod` and `--deploy-first-time`).





















= Usage Scenarios =

These are the most common uses of `mconf-web-conf`.

*To setup a development environment*:
{{{
mconf-web-conf --install-packages development   # install system packages
mconf-web-conf --install-ruby                   # install ruby
mconf-web-conf --checkout                       # get the code
mconf-web-conf --setup-dev                      # setup config files
}}}

*To setup a production environment*:
{{{
mconf-web-conf --install-packages production    # install system packages
mconf-web-conf --install-ruby                   # install ruby
mconf-web-conf --setup-prod                     # setup gems and the web server
}}}

*To deploy the application* (you need both development and production environments to do it):
{{{
mconf-web-conf --deploy-first-time              # use the dev environment to deploy the application
}}}

*To updated and/or restart the deployed application*:
{{{
mconf-web-conf --deploy-update                  # update the code in the deployed application (git pull)
mconf-web-conf --deploy-restart                 # restart the web application
}}}
