#summary Deploy Mconf-Web using Capistrano

*<font color=red>This is a draft, don't use it yet</font>*

= Mconf-Web deployment with Capistrano =

<wiki:toc max_depth="3" />

[https://github.com/capistrano/capistrano Capistrano] is a ruby gem that helps you deploy applications. You run commands from your development environment and they affect your production server. It is great if you're a developer and/or if you have multiple servers to update.

This guide will show you how to setup a production server using Capistrano to deploy the application.

<font color=red>Before starting, you *should* read the comments in [MconfWebDeployment this page]!</font>

== Requirements ==

You need a *development* environment with the Mconf-Web repository checked out and with the configuration files properly edited. This is important because *your local configuration files will be uploaded to the server and be used to configure the deployed application*.

You can see how to do it [MconfWebDevelopment in this page].

== Setting up a production server with Capistrano ==

All the necessary steps to setup a production server are documented in our deployment page. This page will focus on the use of Capistrano and we will point to the deployment page whenever possible.

The steps necessary are:

  # Install system packages. See [http://code.google.com/p/mconf/wiki/MconfWebDeploymentManual#1._System_Packages this guide];
  # Install RVM. You don't need to install Ruby, only RVM! Capistrano will install Ruby for you. But don't forget to add the `mconf` user to the group `rvm` (`sudo adduser mconf rvm`). See [http://code.google.com/p/mconf/wiki/MconfWebDeploymentManual#2._Ruby this guide];
  # Setup your configuration files. Edit them in your development machine and they will be uploaded to the server by Capistrano. See [http://code.google.com/p/mconf/wiki/MconfWebDeploymentManual#4._Edit_the_configuration_files_(manual_configuration) this guide];
  # Use Capistrano to deploy the application: see below how to do it.
  # Install a web server and some other system-wide applications. See [http://code.google.com/p/mconf/wiki/MconfWebDeploymentManual#6._Web_server sections 6 and 7].

As you can see above, most of the steps are documented in the deployment guides and you have the links above. Step 4 is where you'll use Capistrano.


=== Step 4: Capistrano ===

These are the quick steps to use Capistrano. For more information see the other section in this page.

*In your server:*

Capistrano will access your server using ssh, so you need to install a ssh server in your server machine. In Ubuntu you can install it with:

{{{
sudo apt-get install openssh-server
}}}

You can also setup ssh keys to avoid the need to enter a password every time you run a command (which is quite annoying). See how to [MconfWebDeploymentWithCapistrano#Set_up_ssh_keys here].


*In your development machine:*

At first, configure the file `config/deploy/conf.yml`. See how to [MconfWebDeploymentWithCapistrano#Configurations here].

Now you can finally run a capistrano command that will setup the application in your production server:

{{{
cap staging setup:all  # change "staging" to "production" to use the production stage
}}}

This task will:
  * Create the basic directories in the server;
  * Checkout Mconf-web from GitHub (using the branch you specified in <tt>conf.yml</tt>);
  * Setup the database (with the basic data needed).

It might take some time, it will download the application and install several gems.

That's it. Keep following the steps at the top of this guide and soon the application will be ready.

Keep reading this page for more information on how to update the application and others.


== Detailed information ==


=== Set up ssh keys ===

You can find plenty of resources about it in the web, but here's a quick guide.

Start by generating your personal key if you don't have one yet:

{{{
mkdir ~/.ssh
chmod 700 ~/.ssh
ssh-keygen -t rsa # you will be prompted for a password
}}}

Then you have to add your public key to the list of authorized keys in your server (note: don't forget to change "deploy@myserver.com"):

{{{
cat ~/.ssh/id_rsa.pub | ssh deploy@myserver.com "mkdir -p .ssh/ && cat >> .ssh/authorized_keys2"
}}}

More information at:

  * https://help.ubuntu.com/community/SSH/OpenSSH/Keys
  * http://help.github.com/deploy-keys/
  * http://snippets.dzone.com/posts/show/5730




=== Configurations ===

There are several configuration files used by Capistrano, but the most important one (and probably the only one you'll have to edit) is <tt>config/deploy/conf.yml</tt>. This file contains the configurations for the *two stages* we use for deployment. A stage is basically a server, so we use two servers that correspond to the stages below:

  * "staging": this is a server to test your application before deploying it to the real production server;
  * "production": the real production server.

All the examples in this page use the "staging" stage, but you can use exactly the same commands for "production" (just replace "staging" for "production").

In the "staging" area of your `conf.yml` you should have something like this:

{{{
staging:
  server: "127.0.0.1"                                 # Deployment server IP or domain
  application: "mconf-web"                            # Application name, do not use spaces
  user: "mconf"                                       # User (in the server) used to deploy
  repository: "git://github.com/mconf/mconf-web.git"  # Repository to get the app from
  scm: "git"                                          # Repository scm
  branch: "latest"                                    # Branch or tag to be deployed
}}}

The parameters are very simple and you can see their meaning reading the comments beside them. The ones you'll most likely change are `server` and `branch`. `server` should be the IP or the domain of your server, and `branch` should be any branch or tag in the repository pointed by `repository`. This branch will be used to deploy the application.

Whenever you change this file (e.g. if you change the branch), you should update the deployed application (see how below).

{{{
cap staging deploy:update
}}}



=== Updating the server ===

After a while, you'll want to update the code of your server. Since you already have everything set up, it's pretty simple. Just run:

{{{
# update to a new release, run the migrations (i.e. updates the DB) and restart the web server
cap staging deploy:migrations
}}}


Also, as already commented, your local configuration files will be uploaded to the server and be used to configure the deployed application. So if you only changed your local configurations and want to apply them in the server, run:

{{{
cap staging deploy:update # will not run migrations
}}}



=== Further information ===

Capistrano has some other tasks you may need. You can see them all running:

{{{
cap -T
}}}

Below there's a list with tasks defined by Mconf-Web that you will possibly use:

{{{
cap staging deploy:udpate       # update to a new release
cap staging deploy:migrate      # run migrations
cap staging deploy:restart      # restart the web server
cap staging deploy:web:disable  # start maintenance mode (the site will be offline)
cap staging deploy:web:enable   # stop maintenance mode (the site will be online)
cap staging deploy:rollback     # go back to the previous version
cap staging setup:secret        # creates a new secret token (requires restart)
cap staging setup:db            # drops, creates and populates the db with the basic data
}}}

The files used by Capistrano that you may want to edit are:

  * <tt>config/deploy.rb</tt>
  * <tt>config/deploy/conf.yml</tt>
  * <tt>config/deploy/production.rb</tt>
  * <tt>config/deploy/staging.rb</tt>

Links:

  * Capistrano documentation: https://github.com/capistrano/capistrano/wiki
  * Multiple stages in Capistrano: https://github.com/capistrano/capistrano/wiki/2.x-Multistage-Extension