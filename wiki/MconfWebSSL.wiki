#summary Enable SSL/HTTPS in Mconf-Web

= Mconf-Web with SSL (HTTPS) =

This page describes how to enable SLL/HTTPS in your Mconf-Web server.


= Certificate =

The first thing you need is a SSL certificate. There is plenty of information about it in the Internet (just search for "SSL certificate"), but the fastest way to get things going is to create a [http://en.wikipedia.org/wiki/Self-signed_certificate self-signed certificate]. See below how to do it (with instructions taken from http://wiki.rnp.br/pages/viewpage.action?pageId=41616278).

Copy the following content to a file named `/etc/openssl.conf`.

{{{
[ req ]
default_bits = 2048 # Size of keys
string_mask = nombstr # permitted characters
distinguished_name = req_distinguished_name
 
[ req_distinguished_name ]
# Variable name   Prompt string
#----------------------   ----------------------------------
0.organizationName = <Name of your organization>
organizationalUnitName = <Department in your organization>
organizationalUnitName_default = <Same as above>
emailAddress = <Email address>
emailAddress_max = 40
localityName = <City name>
stateOrProvinceName = <State name>
countryName = <Country name>
countryName_default = <Same as above>
countryName_min = 2
countryName_max = 2
commonName = <Host name including the domain>
commonName_default = <Same as above>
commonName_max = 64
}}}

Generate the key with (replace "`$HOSTNAME`" by the name of your host, for instance "`mconf.org`"):

{{{
openssl genrsa -out /etc/ssl/private/$HOSTNAME.key 2048 -config /tmp/openssl.conf
openssl req -new -key /etc/ssl/private/$HOSTNAME.key -out /etc/ssl/private/$HOSTNAME.csr -batch -config /tmp/openssl.conf
openssl x509 -req -days 730 -in /etc/ssl/private/$HOSTNAME.csr -signkey /etc/ssl/private/$HOSTNAME.key -out /etc/ssl/certs/$HOSTNAME.crt
}}}

Your self-signed certificate will be at: `/etc/ssl/certs/$HOSTNAME.crt`.

And now you can remove the `/etc/openssl.conf` file:

{{{
rm `/etc/openssl.conf`
}}}

= Configuring Apache =

At first, enable some modules that will be needed:

{{{
sudo a2enmod ssl
sudo a2enmod rewrite
}}}

There will be a configuration file to rewrite all request from port 80 to port 443. If you already have Mconf-Web running, you will already have a configuration file that should be at `/etc/apache2/sites-enabled/mconf-web`. Edit this file to include the contents of: https://github.com/mconf/mconf-web/blob/latest/config/webserver/apache2_ssl_80.example (replace "`YOUR_HOST`" by your server's name or IP).

You can also download the new file *and replace the old one* with:

{{{
sudo curl https://raw.github.com/mconf/mconf-web/latest/config/webserver/apache2_ssl_80.example -o /etc/apache2/sites-available/mconf-web
}}}

Then install the configuration file that will respond to request to port 443:

{{{
sudo curl https://raw.github.com/mconf/mconf-web/latest/config/webserver/apache2_ssl_443.example -o /etc/apache2/sites-available/mconf-web-ssl
}}}

In this file (`/etc/apache2/sites-available/mconf-web-ssl`) you will have to edit all occurrences of "`YOUR_IP`", "`YOUR_HOST`", "`YOUR_CERT`" and "`/somewhere/public`" by the appropriate values.


Enable the new configuration file:

{{{
sudo a2ensite mconf-web-ssl
}}}

Restart Apache:

{{{
sudo service apache2 restart
}}}


= Configuring the application =

After configuring the SSL in your server, you have to configure Mconf-Web to use it. You can either access the [MconfWebConfiguring management page] (that might not be accessible now) or do it from your terminal with:

{{{
cd /home/mconf/mconf-web/current
./script/rails runner -e production "Site.current.update_attributes(:ssl => true)"
}}}