#summary Step-by-step guide on how to deploy Mconf-Web

_This page is a continuation of [MconfWebDeployment this page]._

= Mconf-Web Manual Deployment (step-by-step guide) =

<wiki:toc max_depth="3" />

== Overview ==

This is a step-by-step guide showing every detail needed to install Mconf-Web. If you have experience deploying a Rails application this guide should look very familiar to you. Otherwise, if you don't have experience with that or if you're searching for an easier way to install the application, [MconfWebDeploymentWithScript check this page]. 


== Installing Mconf-Web ==


=== 1. System Packages ===

You need to install some system packages before you can run Mconf-web in production. The packages are listed in a file that you can find at [https://github.com/mconf/mconf-web/blob/latest/config/packages.ubuntu config/packages.ubuntu]. You can download this file and install the packages with:

{{{
curl https://raw.github.com/mconf/mconf-web/latest/config/packages.ubuntu -o packages.ubuntu
source packages.ubuntu
sudo apt-get install ${PACKAGES_PRODUCTION[@]}
rm packages.ubuntu
}}}

You will be prompted to type a password for MySQL in case you don't have it installed yet.




=== 2. Ruby ===

Mconf-web uses Ruby *1.9.2* (p290). To install Ruby, we suggest the use of RVM (that's how we install ruby in development and production). But you have other options:

  * Using RVM (recommended): See [http://beginrescueend.com/rvm/install/ this page]. RVM can be installed as single-user or multi-user. For a production environment it is recommended to use the *multi-user* installation.
  * Using apt packages: Ruby can also be installed using apt packages in Ubuntu, but unfortunately they are out of date. Installing ruby 1.9.2 would actually install version 1.9.2-p0 instead of 1.9.2-p290. !BigBlueButton 0.8 uses a nice script to compile ruby from source and install it as a package that you can [http://code.google.com/p/bigbluebutton/wiki/08InstallationUbuntu#2._Install_Ruby see here].
  * From source: You can also download and install ruby manually, similarly to what's done in the script used by !BigBlueButton but skipping the packaging. Make sure you use version 1.9.2-p290. 


If you decided to use RVM, don't forget to actually install Ruby (and not only RVM) and create a gemset for Mconf-web. Also, add your user to the "rvm" group.

{{{
rvm install 1.9.2-p290
rvm gemset create mconf
rvm use --default 1.9.2-p290@mconf
sudo adduser mconf rvm # change "mconf" to your username
}}}



=== 3. Download the application ===

<font color=blue>Note about Capistrano: </font>This is not necessary if you want to use Capistrano, it will checkout the code for you in your production server. So you can skip this step if you'll use Capistrano. See [MconfWebDeploymentWithCapistrano this page] to know how to deploy with Capistrano. 

Install git if you don't have it and clone Mconf-Web:

{{{
sudo apt-get install git-core
mkdir -p ~/mconf-web/current/
git clone git://github.com/mconf/mconf-web.git ~/mconf-web/current/
}}}

Your application will be deployed at `~/mconf-web/current/`, but you can change it if you need to. It is the default path, so it should require less configurations if you don't change it.

Next, change your repository to the version you want to deploy. If you don't do this, you'll be deploying the master branch, and it is not recommended.

{{{
cd ~/mconf-web/current
git checkout v0.6       # go to version 0.6
git checkout latest     # branch that points to the latest version
}}}

The versions available are the tags available. To see all versions, go to [https://github.com/mconf/mconf-web our repository] and see the "Switch tags" button or check the [https://github.com/mconf/mconf-web/archives/master download page]. You can also deploy the branch "latest", it will always point to the latest version available.

With the repository you can now install the dependencies. All dependencies are either gems (and are listed in the Gemfile) or submodules. However, to install the gems first we need to manually install bundler, that will be used to install all the other dependencies. See the commands below:

{{{
git submodule init
git submodule update
gem install bundler -v 1.0.18
bundle install --without=development test
}}}




=== 4. Edit the configuration files (manual configuration) ===

<font color=blue>Note about Capistrano: </font>If you'll use Capistrano, you should never edit the configuration files in you server. Edit them in your development machine and they will be uploaded to the server. See [MconfWebDeploymentWithCapistrano this page].


There are two files that need to be configured. At first, copy the example files:

{{{
cp ~/mconf-web/config/setup_conf.yml.example ~/mconf-web/config/setup_conf.yml
cp ~/mconf-web/config/database.yml.example ~/mconf-web/config/database.yml
}}}

Then edit the files `setup_conf.yml` and `database.yml`. To configure these files, see [MconfWebSetupConf this page].

`setup_conf.yml` has general configurations for the web application and it's optional: if you don't edit it now you can edit its properties from Mconf-Web's interface (see [MconfWebConfiguring this page]).

`database.yml` configures the database and you *have* to configure it now. By default, MySQL will be used. If you haven't set up a password for MySQL yet, you can do it with:

{{{
mysqladmin -u root password "NEW-PASSWORD" # Use the quotes, they are not part of the password
}}}

Or, in case you want to change the password:

{{{
mysqladmin -u root -p password "NEW-PASSWORD"
}}}





=== 5. Install a web server, configure the application and deploy ===

==== 5.1. Web server ====

You can use both Apache or Nginx to serve Mconf-Web. We recommend the use of Apache if you're installing Mconf-Web in the same machine that has !BigBlueButton. If Mconf-Web will be installed in a standalone machine, you can pick your favorite server.

Mconf-Web uses Passenger to server the application together with Apache or Nginx. So you'll have to install Passenger and use it in the configurations of the web server. See the guide below for a how to:

  * [MconfWebDeploymentInstallPassenger Guide to install Passenger]


==== 5.2. System-wide configurations ====

This contains the extra configurations you need to do on your server to run Mconf-Web. 

The first thing is to install and configure God, a process monitoring tool:

  * [MconfWebDeploymentInstallGod Guide to install God]

Also, we use a gem called Whenever to setup the crontab with tasks for Mconf-Web:

  * [MconfWebDeploymentGuideWhenever Guide to use Whenever]


==== 5.3. Application configurations ====

<font color=blue>Note about Capistrano: </font>If you'll use Capistrano this is not needed. See [MconfWebDeploymentWithCapistrano this page].


This step consists of everything that was not possible to be done at 3. because we needed the configuration files properly edited.

We'll setup the database and generate a new [http://www.railsrocket.com/rake-secret secret key] for rails:

{{{
bundle exec rake setup:db RAILS_ENV=production
bundle exec rake secret RAILS_ENV=production
}}}

After that, you should restart your application. See the maintenance tasks below.




== Maintenance tasks ==


=== Restart ===

To restart the application you need to restart the web server and god:

{{{
sudo /etc/init.d/apache2 restart  # if you're using apache
sudo /etc/init.d/god terminate
sudo /etc/init.d/god start
}}}

The web server you'll need to restart every time you change anything in the application (source code) or configuration files.

You don't always need to restart god, only if you changed anything in its configuration files or in files that the monitored processes use (for example, if you change the Gmail account settings used to send emails). If you're not sure, restart it. Also, we use the action "terminate" so that god will also stop all monitored processes before stopping itself. It will, for instance, stop delayed_job  (a gem used to send emails) and then, when god is restarted, delayed_job will also be restarted (and so your new configurations will be applied).


=== Update ===

At first, update your repository and checkout the version you want:

{{{
cd ~/mconf-web/current
git pull
git checkout v0.6  # go to version 0.6
}}}

You can use the branch "latest" that will always point to the latest version:

{{{
git checkout latest
git pull origin latest
}}}

Update the dependencies:

{{{
git submodule update
bundle install --without=development test
}}}

Migrate the database:

{{{
bundle exec rake db:migrate RAILS_ENV=production
}}}

Update the crontab:

{{{
bundle exec whenever --update-crontab RAILS_ENV=production
}}}


There are also other files that might need to be updated, such as the configuration files for God, that will not be configured with the commands above. To check if you need to do any extra work, check the update notes in the [MconfWebRoadMap changelog page].

Restart the web server as described in the previous section.



=== Backup ===

The most important backup you need is your database. If you're using MySQL, you can use the following commands to backup (and restore) the database used by Mconf-Web:

{{{
# backup
mysqldump -u root -p mconf_production > mconf_production-`date +%F`.sql

# restore
mysql -u root -p mconf_production < mconf_production-2011-06-21.sql
}}}

There are also files that are not stored in the database, such as user images and attachments. And you also might want to backup your log files.

So make sure you backup the files in the following folders:

{{{
(...)/mconf-web/attachments/
(...)/mconf-web/public/logos/
(...)/mconf-web/log/
}}}