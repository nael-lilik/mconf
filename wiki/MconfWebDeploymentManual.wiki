_This page is a continuation of [MconfWebDeployment this page]._

= Mconf-Web Manual Deployment =

== (1) Configuring the server ==

=== Ruby and RVM ===

Mconf-web uses Ruby *1.9.2*. To install Ruby, we suggest the use of RVM. There are scripts in Mconf-web that assume you have RVM installed, so you should use it unless you can't do it for some reason.

You can install RVM following our [RVMQuickSteps quick steps] or following [https://rvm.beginrescueend.com/rvm/install/ RVM's install page].

If you decided to use RVM, don't forget to actually install Ruby (and not only RVM) and create a gemset for Mconf-web:

{{{
rvm install 1.9.2
rvm gemset create mconf
rvm use --default 1.9.2@mconf
}}}


=== System Packages ===

You need to install system packages to run Mconf-web in production. The packages are listed in a file that you can find at [https://github.com/mconf/mconf-web/blob/master/config/packages.ubuntu config/packages.ubuntu]. You can download this list and install the packages with:

{{{
curl https://raw.github.com/mconf/mconf-web/master/config/packages.ubuntu -o packages.ubuntu
source packages.ubuntu
sudo apt-get install ${PACKAGES_PRODUCTION[@]}
rm packages.ubuntu
}}}

You will be prompted to type a password for MySQL in case you don't have it installed yet.

=== Passenger + Web Server ===

You can use both Apache or Nginx to serve Mconf-Web. We recommend the use of Apache if you're installing Mconf-Web in the same machine that has !BigBlueButton. If Mconf-Web will be installed in a standalone machine, you can pick your favorite server.

==== Apache ====

To use Apache with Passenger, you first need to install Apache and some other dependencies required by Passenger. There are several packages needed. You can download the list and install the packages with:

{{{
curl https://raw.github.com/mconf/mconf-web/master/config/packages.ubuntu -o packages.ubuntu
source packages.ubuntu
sudo apt-get install ${PACKAGES_APACHE[@]}
rm packages.ubuntu
}}}

You can also see the list of packages [https://github.com/mconf/mconf-web/blob/master/config/packages.ubuntu in this file] in our repository

Next, install Passenger (it's a ruby gem) and it's module for Apache. Passenger has a nice installer that will compile the Apache module and install it for you. If some dependency is missing it will warn you and help you install it. Run the following commands:

{{{
gem install passenger
rvmsudo passenger-install-apache2-module
}}}

The application `passenger-install-apache2-module` is interactive and has the following steps:

  # Check for dependencies: If your system is missing any required software, it will warn you and tell you how to install them;
  # Automatically compile and install the module for Apache;
  # It will show you some lines that must be added the you Apache configuration file. Ignore this for now, the next step of this guide will show you how to configure it.
  # In the last step it will give you an example of how to deploy an application. Ignore the example for now, the next step of this guide will show you the specific configurations for Mconf-web.

See more about Passenger at [http://www.modrails.com/ their website] and [http://www.modrails.com/videos/passenger.mov check this video] to see how it can be installed along with Apache.

===== Apache Configuration =====

By default Apache is installed at `/etc/apache2/` and it's configuration file will be at `/etc/apache2/httpd.conf`.
You can add configuration files at `/etc/apache2/conf.d/` and sites at `/etc/apache2/sites-available/`.

At first, enable the Passenger module in Apache:

{{{
rvmsudo passenger-install-apache2-module --snippet | sudo tee /etc/apache2/conf.d/mconf-passenger
}}}

This will create a new configuration file with the Passenger module snippet, the same block Passenger showed you in the item 3. in the previous section. If you already added these lines to you config file, ignore this step.

Next, we enable the rewrite module in Apache and remove any default site existent:

{{{
sudo ln -f -s /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/rewrite.load
sudo rm /etc/apache2/sites-enabled/*
}}}

Now you need to add a configuration file for Mconf-Web. You might just download our example edit it:

{{{
curl https://raw.github.com/mconf/mconf-web/master/config/apache2.conf.example -o /etc/apache2/sites-available/mconf-web
}}}

This is the content of this file:

{{{
<VirtualHost *:80>
  ServerName www.yourhost.com
  DocumentRoot /somewhere/public
  <Directory /somewhere/public>
    AllowOverride all
    Options -MultiViews
  </Directory>
</VirtualHost>
}}}

You should change "`www.yourhost.com`" for your IP or domain and "`/somewhere/public`" (both occurrences) for the path to your Mconf-Web application. Following this guide, the path should be "`/home/mconf/mconf-web/current/public`".


Last, restart Apache and it should be ready to serve Mconf-Web:

{{{
sudo /etc/init.d/apache2 restart
}}}

Open your browser and try to access your localhost. You should see a page with the error "404 Not Found". That is ok, Apache can't find the application because it was not deployed yet. Proceed to the [MconfWebDeploymentManual#(2)_Deploy (2) Deploy] section.

==== Nginx ====

_*Note:* If you're installing Mconf-Web in the same machine where you already have !BigBlueButton, you should use Apache for Mconf-Web. If you decide to use Nginx, you'll have to configure it manually (see more about this issue [MconfWebDeployInBBBMachine in this page])._

To use Nginx with Passenger, first install Passenger (it's a ruby gem) and then it will help you download, compile and install Nginx. Actually, it will do it all for you. Run the following commands:

{{{
gem install passenger
rvmsudo passenger-install-nginx-module
}}}

The application `passenger-install-nginx-module` is a installer that guides you through the installation of Nginx for Passenger. It is interactive and has the following steps:

  # Check for dependencies: If your system is missing any required software, it will warn you and tell you how to install them;
  # Automatically download and install Nginx: Select the option *"1. Yes"*;
  # Where do you want to install Nginx to: You can choose the default location (just press enter). Nginx will be compiled and installed;
  # It will edit Nginx configuration file for you and give you an example of how to deploy an application. Ignore the example for now, the next step of this guide will show you the specific configurations for Mconf-web.

See more about Passenger at [http://www.modrails.com/ their website] and [http://www.modrails.com/videos/passenger_nginx.mov check this video] to see how it can be installed along with Nginx.

===== Nginx Configuration =====

If you installed Nginx in the default location, it's configuration file will be at `/opt/nginx/conf/nginx.conf`.

Open this file and add the following content inside the `http` block, above the other `server` block. 

{{{
server {
    listen 80;
    server_name IP_OR_DOMAIN;
    root /home/mconf/mconf-web/current/public;
    passenger_enabled on;
    if (-f $document_root/system/maintenance.html) {
        rewrite ^(.*)$ /system/maintenance.html break;
    }
}
}}}

  <font color="red">*Important:*</font> Don't forget to change *`IP_OR_DOMAIN`* by the IP or domain name of your server.

You can find an example of the nginx.conf we use at our repository [https://github.com/mconf/mconf-web/blob/master/config/nginx.conf.example here].

Since Passenger installs Nginx from source code, you won't have the script to start/stop Nginx. So we copied the script generated when you install the Nginx package in Ubuntu and made it available [https://github.com/mconf/mconf-web/blob/master/config/nginx.init.example here]. Download it to your server with:

{{{
sudo curl https://raw.github.com/mconf/mconf-web/master/config/nginx.init.example -o /etc/init.d/nginx
}}}

Now you can start/stop/restart Nginx with:

{{{
sudo /etc/init.d/nginx start
sudo /etc/init.d/nginx stop
sudo /etc/init.d/nginx restart
}}}

Start your web server now, open your browser and try to access it. You should see a page with the error "404 Not Found". That is ok, Nginx can't find the application because it was not deployed yet.


== (2) Deploy ==

After the previous steps, your server is configured and you can start to deploy the application. The following steps are all executed from your _development_ environment using Capistrano.

=== Capistrano ===

Capistrano is a ruby gem that helps you deploy applications. You run commands from your development environment and they affect your production server.

You should start by editing the file <tt>config/deploy/conf.yml</tt>. This file contains the configurations for the "two stages" we use for deployment:

  * "staging": this is a stage to test your application before deploying it to the real production server;
  * "production": the real production server.

All the examples below are for the "staging" stage. You can use the same commands for "production", just replace "staging" for "production".

==== Set up ssh keys ====

To enable capistrano to access your server you have to generate a public key for your local user (if you don't have one yet) and allow access to it in your server. You can find plenty of resources about it in the web, but shortly, you could do the following:

{{{
# generate the key
mkdir ~/.ssh && chmod 700 ~/.ssh
ssh-keygen -t rsa
  -> (you will be prompted for a password)

# set it in your server (NOTE: don't forget to change "deploy@myserver.com")
cat ~/.ssh/id_rsa.pub | ssh deploy@myserver.com "cat >> .ssh/authorized_keys2"
}}}

More information at:

  * https://help.ubuntu.com/community/SSH/OpenSSH/Keys
  * http://help.github.com/deploy-keys/
  * http://snippets.dzone.com/posts/show/5730

==== First deploment ====

Our deploy has a task called `setup:all` that can be used to setup a server for the first time. Run:

{{{
cap staging setup:all
}}}

This task will do the following:
  * Create the basic directories in the server;
  * Checkout Mconf-web from github (using the branch you specified in <tt>conf.yml</tt>) and make it available to be served by Nginx;
  * Setup the database (with the basic data needed).

  <font color="red">*Important:*</font> The configuration files used in your development environment will be uploaded to the production server. So make sure you configured them. If you change any of them and need to upload to the production server, run:
  {{{
cap staging deploy:update
  }}}

==== Updating the server ====

After a while, you'll want to update the code of your server. Since you already have everything setup, it's pretty simple. Just run:

{{{
cap staging deploy:migrations  # update to a new release, run the migrations (i.e. updates the DB) and restart the web server
}}}

==== Further information ====

Capistrano has some other tasks you may need. You can see them all running:

{{{
cap -T
}}}

Below there's a list with tasks defined by Mconf-Web that you will possibly use:

{{{
cap staging deploy:udpate       # update to a new release
cap staging deploy:migrate      # run migrations
cap staging deploy:restart      # restart the web server
cap staging deploy:web:disable  # start maintenance mode (the site will be offline)
cap staging deploy:web:enable   # stop maintenance mode (the site will be online)
cap staging deploy:rollback     # go back to the previous version
cap staging setup:secret        # creates a new secret token (requires restart)
cap staging setup:db            # drops, creates and populates the db with the basic data
}}}

The files used by Capistrano that you may want to edit are:

  * <tt>config/deploy.rb</tt>
  * <tt>config/deploy/conf.yml</tt>
  * <tt>config/deploy/production.rb</tt>
  * <tt>config/deploy/staging.rb</tt>

Links:

  * Capistrano documentation: https://github.com/capistrano/capistrano/wiki
  * Multiple stages in Capistrano: https://github.com/capistrano/capistrano/wiki/2.x-Multistage-Extension