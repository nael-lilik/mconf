_This page is a continuation of [MconfWebDeployment this page]._

Note: From version 0.3, the script has changed quite a bit. The documentation for the old version [MconfWebDeploymentManual0.2 can be found here].

= Mconf-Web Manual Deployment (step-by-step guide) =

<wiki:toc max_depth="3" />

== Overview ==

This is a step-by-step guide showing every detail needed to install Mconf-Web. If you have experience deploying a Rails application this guide should look very familiar to you. Otherwise, if you don't have experience with that or if you're searching for an easier way to install the application, [MconfWebDeploymentWithScript check this page]. 

We tried to keep this page in the same format as the page that describes how to install Mconf-Web using the script `mconf-web-conf` ([http://code.google.com/p/mconf/wiki/MconfWebDeploymentWithScript here], so that you can easily relate both guides and solve any doubts you may have.

== Installing Mconf-Web ==


=== 1. System Packages ===

You need to install some system packages before you can run Mconf-web in production. The packages are listed in a file that you can find at [https://github.com/mconf/mconf-web/blob/master/config/packages.ubuntu config/packages.ubuntu]. You can download this file and install the packages with:

{{{
curl https://raw.github.com/mconf/mconf-web/master/config/packages.ubuntu -o packages.ubuntu
source packages.ubuntu
sudo apt-get install ${PACKAGES_PRODUCTION[@]}
rm packages.ubuntu
}}}

You will be prompted to type a password for MySQL in case you don't have it installed yet.

=== 2. Ruby ===

<font color=red>*TODO:* Update to install RVM as multi-user</font>

Mconf-web uses Ruby *1.9.2*. To install Ruby, we suggest the use of RVM. There are scripts in Mconf-web that assume you have RVM installed, so you should use it unless you can't do it for some reason.

You can install RVM following our [RVMQuickSteps quick steps] or following [https://rvm.beginrescueend.com/rvm/install/ RVM's install page]. 

If you decided to use RVM, don't forget to actually install Ruby (and not only RVM) and create a gemset for Mconf-web:

{{{
rvm install 1.9.2
rvm gemset create mconf
rvm use --default 1.9.2@mconf
}}}

=== 3. Install a web server, more dependencies and download the aplication ===

==== 3.1. Web server ====

You can use both Apache or Nginx to serve Mconf-Web. We recommend the use of Apache if you're installing Mconf-Web in the same machine that has !BigBlueButton. If Mconf-Web will be installed in a standalone machine, you can pick your favorite server.

The guides to install the web server are in separate wiki pages:

  * [MconfWebDeploymentInstallApache Guide to install Apache]
  * [MconfWebDeploymentInstallNginx Guide to install Nginx]


==== 3.2. Other dependencies ====

In this step the script `mconf-web-conf` installs: bundler, passenger, god and all the other gems needed (they are installed using bundler). Following this manual guide, you've already installed passenger. The other gems will be installed after checking out the repository. So what we need here is to install bundler and god.

*Bundler* is pretty simple. The latest version should work, but if not, try the version set in GEM_VERSION_BUNDLER in `mconf-web-conf`. Bundler is used to install and manage all other gems that Mconf-Web uses. Install it with:

{{{
gem install god
}}}

*God* is a process monitoring framework and is also a gem. But god is a little bit trickier to install. We need to install it as a system-wide application and configure it as such. God should be always running, just like your web server will always be running.

At first, install it with:

{{{
gem install god 0.11.0
}}}

If you're using RVM you need to create a wrapper for god:

{{{
rvm wrapper 1.9.2@mconf bootup god
}}}

Next, we'll create a configuration file for god at `/etc/god/config`, that will simply load any other configuration file in `/etc/god/conf.d/`.

{{{
sudo mkdir -p /etc/god/conf.d/
sudo curl https://raw.github.com/mconf/mconf-web/master/config/god/config -o /etc/god/config
}}}

God for now is used to monitor the process `delayed_job` (used to deliver emails, mostly). So you need to install god's configuration file for delayed_job:

{{{
sudo curl https://raw.github.com/mconf/mconf-web/master/config/god/delayed_job.god -o /etc/god/conf.d/delayed_job.god
}}}

This file has a line that points to Mconf-Web's path, so it should be edited to match the path where you will place Mconf-Web. You can use the following command to edit it (replace `%PATH%` with the actual path):

{{{
sudo sed -i "s:^RAILS_ROOT =.*:RAILS_ROOT = \"%PATH%\":g" /etc/god/conf.d/delayed_job.god
}}}

To start and stop god, we'll install an init script in `/etc/init.d/`:

{{{
sudo curl https://raw.github.com/mconf/mconf-web/simplify_install_script/config/god/init_script -o /etc/init.d/god
sudo chmod a+x /etc/init.d/god
sudo update-rc.d god defaults
}}}

Then you can start/stop god with:

{{{
sudo /etc/init.d/god {start|stop|restart|status}
}}}

==== 3.3. Checkout the code ====

<font color=red>*Note:* </font>This and the following steps are not necessary if you want to use Capistrano. Capistrano will checkout the code for you in your production server. See [MconfWebDeploymentWithCapistrano this page] to know how to deploy with Capistrano.

Install git if you don't have it and clone Mconf-Web:

{{{
sudo apt-get install git-core
git clone git://github.com/mconf/mconf-web.git ~/mconf-web
}}}

Your application will be deployed at `~/mconf-web/`, but you can change it if you need to.

Next, change your repository to the version you want to deploy. If you don't do this, you'll be deploying the master branch, and it is not recommended.

{{{
cd ~/mconf-web/
git checkout v0.3  # go to version 0.3
}}}

The versions available are the tags available. To see all versions, go to [https://github.com/mconf/mconf-web our repository] and see the "Switch tags" button or check the [https://github.com/mconf/mconf-web/archives/master download page]. 

With the repository you can now install the other dependencies that we skipped in the step 3.2. Go to the repository and run:

{{{
git submodule init
git submodule update
bundle install
}}}


=== 4. Edit the configuration files (manual configuration) ===

<font color=red>*Note:* </font>If you'll use Capistrano, you should never edit the configuration files in you server. Edit them in your development machine and they will be uploaded to the server. See [MconfWebDeploymentWithCapistrano this page].


There are two files that need to be configured. At first, copy the example files:

{{{
cp ~/mconf-web/config/setup_conf.yml.example ~/mconf-web/config/setup_conf.yml
cp ~/mconf-web/config/database.yml.example ~/mconf-web/config/database.yml
}}}

Then edit the files `setup_conf.yml` and `database.yml`. *To configure these files, see [MconfWebSetupConf this page]*.

`setup_conf.yml` has general configurations for the web application and `database.yml` configures the database. By default, MySQL will be used. If you haven't set up a password for MySQL yet, you can do it with:

{{{
mysqladmin -u root password "NEW-PASSWORD" # Use the quotes, they are not part of the password
}}}

Or, in case you want to change the password:

{{{
mysqladmin -u root -p password "NEW-PASSWORD"
}}}


=== 5. Deploy for the first time ===

<font color=red>*Note:* </font>If you'll use Capistrano this is not needed. See [MconfWebDeploymentWithCapistrano this page].

This step consists of everything that was not possible to be done at 3. because we needed the configuration files properly edited.

We'll setup the database and generate a new [http://www.railsrocket.com/rake-secret secret key] for rails:

{{{
bundle exec rake setup:db RAILS_ENV=production
bundle exec rake secret RAILS_ENV=production
}}}

After that, you should restart your application. See the maintenance tasks below.


== Maintenance tasks ==


=== Restart ===

To restart the application you need to restart the web server and god:

{{{
sudo /etc/init.d/apache2 restart  # if you're using apache
sudo /etc/init.d/god restart
}}}

You don't always need to restart god, only if you changed anything in it's configuration files. The web server you'll need to restart every time you change anything in the application (source code) or configuration files.

=== Update ===

........

restart server